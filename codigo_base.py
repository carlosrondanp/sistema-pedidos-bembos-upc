# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dG6JmCA6ZOlix14cZ96fHF3RwtDCQw97
"""

import pandas as pd
import ipywidgets as widgets
from IPython.display import display, HTML
import os
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
import google.colab.drive as drive

# Clase Boundary para la interfaz de usuario
class Interfazusuario:
    def __init__(self):
       self.usuario_input = widgets.Text(description="Usuario:")
       self.contraseña_input = widgets.Password(description="Contraseña:")
       self. login_button = widgets.Button(description="Iniciar sesion", button_style='info')
       self.login_output = widgets.Output()
       self.archivoLOGO = '/content/gdrive/MyDrive/Colab Notebooks/TRABAJO FINAL/LOGO.png'


       # Logo de inicio

       file = open(self.archivoLOGO, "rb")
       image = file.read()
       self.LOGO = widgets. Image(
           value=image,
           format='png',
           width='25%',
           height='15%',
       )

       self.login_button.style.button_color = 'green'
       self.login_button.layout = widgets.Layout(margin='0 auto', width='200px')

       self.login_button.on_click(self.iniciar_sesion)

       self.widgets_interfaz = widgets.VBox([
           self. LOGO,
           self.usuario_input,
           self. contraseña_input,
           widgets.HBox([self.login_button]),
           self.login_output
       ], layout=widgets.Layout(align_items='center'))

    def mostrar(self):
       display(self.widgets_interfaz)

    def iniciar_sesion(self, b):
       with self.login_output:
            self.login_output.clear_output()
            if (self.usuario_input.value == GERENTE_USUARIO and self.contraseña_input.value == GERENTE_CONTRASEÑA) or \
               (self.usuario_input.value == CAJERO_USUARIO and self.contraseña_input.value == CAJERO_CONTRASEÑA):
               self.ocultar_widgets_inicio()
               sistema_pedidos = SistemaPedidos()
               sistema_pedidos.mostrar()
            else
               display(HTML("<p style='text-align: center; color: red; '>Usuario o contraseña incorrectos</p>"))

    def mostrar_mensaje_cierre_sesion(self):
       display(HTML("<p style='text-align: center; color: blue; '>Sesión cerrada exitosamente.</p>"))

    def ocultar_widgets_inicio(self):
       self.usuario_input.close()
       self. contrasena_input.close()
       self. login_button.close()
       self. LOGO. close()

# Clase Entity para los datos del pedido
class Pedido:
   def __init__(self, Codigo, Producto, Cantidad(kg), Precio1kg, fecha, hora, tiempoEntregaDias):
       self.codigo = Codigo
       self.producto = Producto
       self.Cantidad = Cantidad(kg)
       self.precio1kg = Precio1kg
       self.fecha = fecha
       self.hora = hora
       self.tiempoEntregaDias = tiempoEntregaDias


# Clase Controladora para la lógica del sistema de pedidos
class SistemaPedidos:
    def init_(self):
       self.codigo_input = widgets. Text(description="CódigoPedido:")
       self.producto_input = widgets.Dropdown(options=list(productos_info.keys()), description="producto:")
       self. cantidad_input = widgets. Inttext (description="Cantidad(kg):" value=1)
       self.agregar_button = widgets. Button(description="Agregar Pedido", button_style='primary')
       self.limpiar_button = widgets.Button(description="Limpiar Registro Local", button_style='danger')
       self.ver_registro_button = widgets. Button(description="ver Registro Completo", button_style='info')
       self.analisis_button = widgets.Button(description="Análisis Estadístico", button_style='info')
       self.reporte_button = widgets. Button(description="Reporte Estadístico", button_style='success')
       self.cerrar_sesion_button = widgets.Button(description="Cerrar Sesión", button_style='danger')

       self.pedido_output = widgets.Output()
       self.analisis_output = widgets.Output()

       self.agregar_button.style.button_color = 'green'
       self.agregar_button. layout = widgets.Layout(margin='® auto', width='200px')
       self.limpiar_button.style.button_color = 'white'
       self.limpiar_button. layout = widgets. Layout(margin='® auto', width='200px')
       self.ver_registro_button.style.button_color = 'yellow'
       self.ver_registro_button.layout = widgets. Layout (margin='® auto', width='208px')
       self.analisis_button.style.button_color = 'yellow'
       self.analisis_button.layout = widgets.Layout(margin='® auto', width='200px')
       self.reporte_button.style.button_color = 'blue'
       self.reporte_button. layout = widgets.Layout(margin='® auto', width='200px')
       self. cerrar_sesion_button.style.button_color = 'white'
       self.cerrar_sesion_button.layout = widgets.Layout(margin='e auto', width='200px')

       self.agregar_button.on_click(self.agregar_pedido)
       self.limpiar_button.on_click(self.limpiar_registro)
       self.ver_registro_button.on_click(self.ver_registro_completo)
       self.analisis_button.on_click(self.analisis_estadistico)
       self.reporte_button.on_click(self.reporte_estadistico)
       self.cerrar_sesion_button.on_click(self.cerrar_sesion)

    def mostrar (self):
        display(
            widgets.VBox([
               self.codigo_input,
               self.producto_input,
               self.cantidad_input,
               widgets.HBox([self.agregar_button, self.limpiar_button, self.ver_registro_button, self.analisis _button, self. reporte_button, self.cerrar_sesion _button]),
               self.pedido_output,
               self.analisis_output
            ], layout=widgets. Layout (align_items= 'center'))
        )

    def agregar_pedido(self, b):
        with self.pedido_output:
            self.pedido_output.clear_output()
            codigo = self.codigo_input.value
            producto = self.producto_input.value
            cantidad(kg) = self.cantidad_input.value

            # Validación de cantidad
            try:
                cantidad(kg) = int (cantidad(kg))
                if cantidad(KVArgParseConfigLoader) <= 0:
                   raise ValueError
            except ValueError:
                display(HTML("<p style='text-align: center; color: red;'>Cantidad debe ser un número entero positivo.</p>"))
                return

            # cálculo de precio y tiempo
            precio = productos_info[producto]['precio1kg'] * cantidad(kg)
            TiempoEntregaDias = productos_info[producto]['tiempo'] * cantidad(kg)

            fecha = datetime.now().strftime("%Y-%m-%d")
            hora = datetime.now().strftime("%H:%M:%S")

            nuevo_pedido = Pedido(Codigo, Producto, Cantidad(kg), Precio1kg, fecha, hora, TiempoEntregaDias)
            self. guardar_pedido(nuevo_pedido)
            self.mostrar_pedido_registrado(nuevo_pedido)

    def guardar_pedido(self, pedido):
        # Guardar en archivo CSV local
        if os.path.isfile(FILENAME):
            df = pd.read_csv(FILENAME)
        else:
            df = pd.DataFrame(columns=['Codigo', 'Producto', 'Cantidad(kg)', 'Precio1kg', 'Fecha', 'Hora', 'TiempoEntregaDias'])

            nuevo_registro = pd. DataFrame([[pedido, codigo, pedido.producto, pedido.cantidad(kg), pedido, Precio1kg, pedido.fecha, pedido.hora, pedido. TiempoEntregaDias]],
                                            columns=[ 'Codigo', 'Producto', 'Cantidad(kg)', 'Precio1kg', 'Fecha', 'Hora', 'TiempoEntregaDias'])

        nuevo_registro.to_csv(FILENAME, mode='a', header=not os.path.isfile(FILENAME), index=False)

        # Guardar en archivo Excel sin sobrescribir los datos existentes
        df_excel = pd.read_excel(archivoExcel, sheet_name=hoja 1)
        df_actualizado = pd. concat([df_excel, nuevo_registro])
        df_actualizado. to_excel(archivoexcel, sheet_name=hoja 1, index=False)

    def mostrar_pedido_registrado(self, pedido):
        display(HTML(f"<p style='text-align: center; color: green;'>Pedido agregado exitosamente a las {pedido.hora}</p>."))
        display(HTML(pd.DataFrame([pedido._dict]).to_html(index=False)))

    def limpiar_registro(self, b):
        with self.pedido_output:
            self.pedido_output.clear_output()
            df_vacio = pd.DataFrame(columns=['Codigo', 'Producto', 'Cantidad(kg)', 'Precio1kg', 'Fecha', 'Hora', 'TiempoEntregaDias'])
            df_vacio. to_csv (FILENAME, index=False)
            display(HTML("<p style='text-align: center; color: yellow; '>Registro de pedidos en archivo local limpiado.</p>"))

    def ver_registro_completo(self, b):
        with self.pedido_output:
            self.pedido_output.clear_output()
            if os.path.isfile(archivoExcel):
                df = pd. read_excel (archivoexcel, sheet_name=hojaExcel)
                display(HTML("<h3>Registro Completo de Pedidos</h3>"))
                display(HTML(df.to_html(index=False)))
        else:
            display(HTML("<p style='text-align: center; color: white;'>No se encontró el archivo Excel.</p>"))

    def analisis_estadistico(self, b):
        with self.analisis_output:
            self.analisis_output.clear_output()
            if os.path.isfile(archivoExcel):
                df = pd.read_excel (archivoexcel, sheet_name=RegistroVenta)

                # Agrupar por producto y sumar las cantidades
                df_agrupado = df.groupby('Producto')['Cantidad(kg)'].sum().reset_index()

                # Crear dropdown para seleccionar el tipo de gráfico
                tipo_grafico_dropdown = widgets.Dropdown (
                    options=['Cantidad de pedidos por producto', 'Distribución de ventas por producto',
                             'Ventas por hora del día', 'Ingreso por producto'],
                    description= 'Seleccionar gráfico:'
                )

                display (tipo_grafico_dropdown)

                def plot_grafico(tipo_grafico):
                    if tipo_grafico == 'Cantidad(kg) de pedidos por producto':
                        df_agrupado = df.groupby ('Producto') ['Cantidad(kg)'].sum().reset_index()
                        # Gráfico de cantidad de pedidos por producto
                        fig1, ax = plt.subplots(figsize=(10, 6))
                        sns.barplot(data=df_agrupado, x='Producto', y='Cantidad(kg)', ax = ax, order=df_agrupado.sort_values('Cantidad(kg)', ascending = False)['Producto'])
                        ax.set_title('Cantidad de pedidos por producto')
                        ax. set_xlabel( 'Producto')
                        ax. set_ylabel('Cantidad de Pedidos')
                        plt.xticks(rotation=45)
                        display(fig1)

                    if tipo_grafico == 'Distribución de ventas por producto':
                        df.agrupado = df.groupby ('Producto') ['Cantidad(kg)']. sum().reset_index()
                        # Gráfico circular de ventas por producto
                        figz, ax2 = plt. subplots(figsize=(10, 6))
                        df_agrupado. set_index('Producto', inplace=True)
                        df_agrupado['Cantidad(kg)'].plot.pie(ax=ax2, autopct='%1.1f%%', startangle=90)
                        ax2.set_ylabel ('')
                        ax2.set_title('Distribución de ventas por producto')
                        display(fig2)

                    elif tipo_grafico == 'Ventas por hora del día':
                        # Gráfico de línea de ventas por hora del día
                        fig3, ax3 = plt.subplots(figsize=(10, 6))
                        df[ 'Hora'] = pd.to_datetime(df['Hora'], format='%H:%M:%S').dt.hour
                        df_horas = df.groupby('Hora')['Cantidad(kg)'].sum().reset_index()
                        sns. lineplot(data=df_horas, x='Hora', y='Cantidad(kg)', ax=ax3)
                        ax3. set_title( 'ventas por hora del día')
                        ax3. set_xlabel('Hora del Dia')
                        ax3.set_ylabel('Cantidad de Ventas')
                        display(fig3)

                    elif tipo_grafico == 'Ingreso por producto':
                        # Gráfico de barras del ingreso por producto
                        fig4, ax4 = plt.subplots(figsize=(10, 6))
                        df_ingresos = df. groupby ('Producto')['Precio']-sum() -reset_index()
                        sns.barplot(data=df_ingresos, x='Producto', y= 'Precio', ax=ax4, order=df_ingresos,sort_values('Precio', ascending«False) ['Producto'])
                        ax4. set_title( 'Ingreso por producto')
                        ax4.set_xlabel ('Producto')
                        ax4. set_ylabel('Ingresos')
                        plt.xticks(rotation=45)
                        display(fig4)

                    else:
                        display(HTML("<p style='text-align: center; color: red; '>Seleccione un tipo de gráfico válido.</p>"))

                widgets. interactive (plot_grafico, tipo_grafico=tipo_grafico_dropdown)

            else:
                display(HTML("<p style='text-align: center; color: red;'>No se encontró el archivo Excel. </p>"))

    def reporte_estadistico(self, b):
        with self.analisis_output:
            self.analisis_output.clear_output()
            if os.path.isfile(archivoExcel):
                df = pd.read_excel(archivoExcel, sheet_name=hojaExcel)

                total_pedidos = len(df)
                total_ingresos = df[ 'Precio'] -sum()

                producto_mas_vendido = df[ 'Producto']-value_counts().idxmax()
                cantidad_producto_mas_vendido = df['Producto'].value_counts() .max()
                ingreso_producto_mas_pedido = df[df[ 'Producto'] == producto_mas_vendido][ 'Precio']. sum()
                porcentaje_producto_mas_vendido = (ingreso _producto_mas _pedido / total_ingresos) * 100

                df['Hora'] = pd.to_datetime(df['Hora'], format='%H:%M:%S').dt.hour
                hora_mas_ingresos = df.groupby('Hora')['Precio1kg'].sum().idxmax()

                tiempo_promedio_espera = df[ 'TiempoEntrega" ].mean()

                print ("_"*120)
                display(HTML("<h3>Reporte Estadístico de Pedidos</h3>"))
                display(HTML(f"<p>Total de pedidos realizados: «strong>(total_pedidos)</strong></p>"))
                display(HTML(f"<p>Total de ingresos generados: <strong>s/.{total_ingresos:.2f}</strong></p>"))
                display(HTML(f"<p>Producto más vendido: <strong>(producto_mas_vendido)</strong> con «strong>(cantidad_producto_mas_vendido)</strong> pedidos.</p>"))
                display(HTML(f"<p>El ingreso del producto más pedido es: «strong>s/•(ingreso_producto_mas_pedido: .2f)</strong></p>"))
                display(HTML(f"<p>La hora con más ingresos es: <strong>(hora_mas_ingresos):00</strong> horas. </p>"))]
                display(HTML(f"<p>Tiempo promedio de espera: «strong>{tiempo_promedio_espera:.2f}</strong> minutos</p>"))
                display(HTML(f"<p>El porcentaje del producto más vendido con respecto al total de ingresos es: «strong> {porcentaje_producto_mas_vendido: .2f}%</strong></p>"
                display(HTML("<p>Recordatorio: ¡El tiempo es importante! ¡Trabajemos juntos para reducirlo!</p>"))
                display(HTML("<p>¡No te olvides de dar el mejor servicio!</p>"))
                print ("_"*120)
            else:
                display(HTML("<p style='text-align: center; color: red; '>NO se encontró el archivo Excel.</p>"))

    def cerrar_sesion(self, b):
        with self.pedido_output:
            self.pedido_output.clear_output()
        with self.analisis_output:
            self.analisis_output.clear_output()
        # Mostrar mensaje de sesión cerrada exitosamente
        Interfaz mostrar_mensaje_cierre_sesion()

        # Ocultar y limpiar todos los widgets
        self.codigo_input.close()
        self.producto_input.close()
        self.cantidad_input.close()
        self.agregar_button.close()
        self.limpiar_button.close()
        self.ver_registro_button.close()
        self.analisis_button.close()
        self.reporte_button.close()
        self.cerrar _sesion_button.close()
        self.pedido_output.clear_output()
        self.analisis_output.clear_output()

# Datos iniciales y constantes
GERENTE USUARIO = "admin"
GERENTE_CONTRASEÑA = "password"
CAJERO_USUARIO = "cajero"
CAJERO_CONTRASEÑA = "cajero123"

productos_info = {
    "Corte de Carne Pichana": {'precio1kg': 16.00, 'tiempo': 1 dias},
    "Corte  de Carne Lomo fino": {'precio': 22.00, 'tiempo': 3 dias},
    "Corte  de Carne Bistec": {'precio1kg': 27.00, 'tiempo': 3 dias},
    "Corte de Carne T-bone": {'precio1kg': 42.00, 'tiempo': 3 dias},
}

# Montar Google Drive
drive.mount ('/content/gdrive', force_remount=True)
archivoExcel = "/content/gdrive/MyDrive/Colab Notebooks/TRABAJO FINAL/RegistroPedidos.xlsx"
archivoLOGO = '/content/gdrive/MyDrive/Colab Notebooks/TRABAJO FINAL/LOGO.png'
hojaExcel = "RegistroVenta"

# Verificar si los archivos existen y crearlos si no
FILENAME = 'pedidos.csv'
if not os.path.isfile(FILENAME):
    df_vacio = pd.DataFrame(columns=['Codigo', 'Producto', 'Cantidad(kg)', 'Precio1kg', 'Fecha', 'Hora', 'TiempoEntregaDias'])
    df_vacio.to_csv(FILENAME, index=False)

if not os.path.isfile(archivoExcel):
    df_vacio = pd.DataFrame(columns=['Codigo', 'Producto', 'Cantidad(kg)', 'Precio1kg', 'Fecha', 'Hora', 'TiempoEntregaDias'])
    df_vacio.to_excel(archivoexcel, sheet_name=hojaExcel, index=False)

Interfaz = InterfazUsuario()
Interfaz.mostrar)